# TenantHQ API Test Collection
# Use with VS Code REST Client extension or import into Postman
# Update the base URL and token below to match your environment

@baseUrl = http://localhost:3000
@contentType = application/json
# Update this token after login - copy from login response
@authToken = <Bearer token>
# ================================
# BASIC HEALTH CHECKS
# ================================

### Welcome Message
GET {{baseUrl}}/

### Health Check
GET {{baseUrl}}/health

# ================================
# TENANT MANAGEMENT
# ================================

### Create a New Tenant
POST {{baseUrl}}/api/tenant/create
Content-Type: {{contentType}}

{
  "name": "Acme Corporation",
  "domain": "acme.com"
}

### Create Another Tenant (for testing)
POST {{baseUrl}}/api/tenant/create
Content-Type: {{contentType}}

{
  "name": "Tech Startup Inc",
  "domain": "techstartup.io"
}

### Try to Create Duplicate Tenant (should fail)
POST {{baseUrl}}/api/tenant/create
Content-Type: {{contentType}}

{
  "name": "Duplicate Test",
  "domain": "acme.com"
}

### Get All Tenants
GET {{baseUrl}}/api/tenant/

### Test Invalid Input - Missing Name
POST {{baseUrl}}/api/tenant/create
Content-Type: {{contentType}}

{
  "domain": "invalid-test.com"
}

### Test Invalid Input - Missing Domain
POST {{baseUrl}}/api/tenant/create
Content-Type: {{contentType}}

{
  "name": "Invalid Test"
}

### Test Invalid Input - Empty Request Body
POST {{baseUrl}}/api/tenant/create
Content-Type: {{contentType}}

{}

# ================================
# AUTHENTICATION
# ================================

### Login to get authentication token
POST {{baseUrl}}/api/login
Content-Type: {{contentType}}

{
    "email": "admin@techstartup.io",
    "password": "password"
}


# ================================
# USER MANAGEMENT
# ================================

### Get All Users
GET {{baseUrl}}/api/user
Content-Type: {{contentType}}

### Get Specific User by ID
GET {{baseUrl}}/api/user/1
Content-Type: {{contentType}}

### Create New User - Valid Admin User
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "John Doe Smith",
  "password": "securepassword123",
  "alias": "jdoesmith",
  "role": "ADMIN"
}

### Create New User - Valid Regular User
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "Jane Smith Wilson",
  "password": "mypassword456",
  "alias": "jswilson",
  "role": "USER"
}

### Create New User - Another Admin
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "Michael Johnson",
  "password": "adminpass789",
  "alias": "mjohnson",
  "role": "ADMIN"
}

### Create User - Invalid Input: Short Username (should fail)
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "Srt",
  "password": "password123",
  "alias": "short",
  "role": "USER"
}

### Create User - Invalid Input: Short Password (should fail)
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODY1ZWNjNzQ2MDBiMjMwOTc5YmY4NjciLCJ0ZW5hbnRJZCI6IjY4NjVlY2M2NDYwMGIyMzA5NzliZjg2MyIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1MjkzODI4MiwiZXhwIjoxNzUyOTQxODgyfQ.bckHC8R1Ej820GDZY-L14IhVtYtSyKMUyNktBUai-5E

{
  "userName": "Valid Username",
  "password": "short",
  "alias": "validalias",
  "role": "USER"
}

### Create User - Invalid Input: Short Alias (should fail)
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "Valid Username",
  "password": "validpassword",
  "alias": "sh",
  "role": "USER"
}

### Create User - Invalid Input: Missing Required Fields (should fail)
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "Valid Username"
}

### Create User - Invalid Input: Invalid Role (should fail)
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}} 
Authorization: {{authToken}}

{
  "userName": "Valid Username",
  "password": "validpassword",
  "alias": "validalias",
  "role": "INVALID_ROLE"
}

### Create User - Without Authentication (should fail)
POST {{baseUrl}}/api/user/
Content-Type: {{contentType}}

{
  "userName": "Valid Username",
  "password": "validpassword",
  "alias": "validalias",
  "role": "USER"
}

### Update User
PATCH {{baseUrl}}/api/user/1
Content-Type: {{contentType}}
Authorization: {{authToken}}

{
  "userName": "Updated User Name"
}

### Delete User
DELETE {{baseUrl}}/api/user/1
Content-Type: {{contentType}}
Authorization: {{authToken}}